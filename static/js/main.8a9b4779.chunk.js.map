{"version":3,"sources":["utils/numbers.js","knapsack-calculator/knapsack-calculator.js","reportWebVitals.js","index.js"],"names":["toFixedNumber","num","decimals","pow","Math","round","KnapsackCalculator","props","MAX_TARGET","REGEX_DECIMALS","REGEX_PRICE","REGEX_PRICE_RTL","SORT_BY_INPUT","SORT_BY_NAME","SORT_BY_PRICE","componentDidMount","targetInput","document","getElementById","resizeInput","calculate_solution","reset_item_selections","item_prices","state","map","price","numUtils","parseFloat","item_idxs","JSON","parse","stringify","inputs","num_items","length","target","updatedTarget","num_pinned_items","pinned_items","unpinned_item_prices","unpinned_item_idxs","i","push","pinned_total","T","Array","j","current_item_price","target_without","target_with","max","unpinned_total","total","remainder","toFixed","item_selections","selected_items_idxs","curr_item_idx","curr_target_idx","console","log","idx","setState","sort_items","sort_by","desc","item_names","items","input","name","selected","pinned","sort_by_attr","sorted_inputs","sorted_item_names","sorted_item_prices","sorted_item_selections","sorted_pinned_items","attr","sort","a","b","render_menu","menu_item_id","menu_pin_selected","className","id","onClick","clear_pins","fill","this","render_input","index","input_group_id","pin_icon_id","e","toggle_pin_input","type","placeholder","value","onChange","handle_item_name_change","onKeyDown","handle_enter","inputMode","handle_item_price_click","handle_item_price_change","onBlur","check_price","remove_input","style","width","append_input","concat","splice","preventDefault","updated_inputs","updated_item_names","updated_item_prices","updated_item_selections","updated_pinned_items","pop","key","handle_target_click","saved_price","setAttribute","handle_target_change","test","isNaN","pinned_item_price","num_pinned_prior","getElementsByClassName","format_price_string","format_decimals_string","replace","slice","includes","check_target","remainderStr","bind","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8a9b4779.chunk.js","sourcesContent":["/**\r\n * Get number with fixed decimal spaces.\r\n * @param decimals - number of decimal spaces\r\n * @returns @param num rounded to @param decimals\r\n */\r\nexport const toFixedNumber = (num, decimals) => {\r\n    const pow = Math.pow(10, decimals)\r\n    return Math.round(num * pow) / pow\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport * as numUtils from '../utils/numbers';\r\n\r\nimport './knapsack-calculator.css';\r\n\r\n\r\nexport default class KnapsackCalculator extends Component {\r\n\r\n    // price vars\r\n    MAX_TARGET = 9999.99\r\n\r\n    // price regex\r\n    REGEX_DECIMALS = /(\\.\\d{0,1})$/\r\n    REGEX_PRICE = /^((\\d)*(\\.\\d{0,2})?)$/\r\n    REGEX_PRICE_RTL = /^((\\d)*(\\.)?(\\d)*)$/\r\n\r\n    // sort by vars\r\n    SORT_BY_INPUT = \"input\"\r\n    SORT_BY_NAME = \"name\"\r\n    SORT_BY_PRICE = \"price\"\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            inputs: [0, 1, 2, 3, 4],\r\n            item_names: [\"soda\", \"watermelon\", \"chips\", \"pomegranate\", \"pie\"],\r\n            item_prices: [\"0.99\", \"5.99\", \"1.99\", \"2.99\", \"3.14\"],\r\n            item_selections: [false, false, false, false, false],\r\n            num_pinned_items: 0,\r\n            pinned_items: [false, false, false, false, false],\r\n            pinned_total: 0,\r\n            remainder: \"10.00\",\r\n            saved_price: \"\",\r\n            target: \"10.00\",\r\n            total: \"0.00\",\r\n        }\r\n\r\n        this.calculate_solution = this.calculate_solution.bind(this)\r\n        this.render_input = this.render_input.bind(this)\r\n        this.append_input = this.append_input.bind(this)\r\n        this.remove_input = this.remove_input.bind(this)\r\n        this.handle_item_name_change = this.handle_item_name_change.bind(this)\r\n        this.handle_item_price_change = this.handle_item_price_change.bind(this)\r\n        this.handle_target_change = this.handle_target_change.bind(this)\r\n        this.check_price = this.check_price.bind(this)\r\n        this.check_target = this.check_target.bind(this)\r\n        this.reset_item_selections = this.reset_item_selections.bind(this)\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // resize target input\r\n        const targetInput = document.getElementById(\"target-input\")\r\n        this.resizeInput(targetInput)\r\n    }\r\n\r\n    /* CORE ALGORITHMS */\r\n\r\n    calculate_solution = () => {\r\n        // reset selections\r\n        this.reset_item_selections()\r\n\r\n        // init vars for knapsack\r\n        let item_prices = this.state.item_prices.map(price => {\r\n            return numUtils.toFixedNumber(parseFloat(price) * 100, 0)\r\n        })\r\n        let item_idxs = JSON.parse(JSON.stringify(this.state.inputs))\r\n        let num_items = item_prices.length\r\n        let target = numUtils.toFixedNumber(parseFloat(this.state.target) * 100, 0)\r\n        let updatedTarget = target\r\n\r\n        // filter out pinned items\r\n        const num_pinned_items = this.state.num_pinned_items\r\n        if (num_pinned_items > 0) {\r\n            // get unpinned item vars\r\n            const pinned_items = this.state.pinned_items\r\n            let unpinned_item_prices = []\r\n            let unpinned_item_idxs = []\r\n            for (let i = 0; i < pinned_items.length; i++) {\r\n                if (!pinned_items[i]) {\r\n                    unpinned_item_prices.push(item_prices[i])\r\n                    unpinned_item_idxs.push(i)\r\n                }\r\n            }\r\n\r\n            // use unpinned item vars\r\n            item_prices = unpinned_item_prices\r\n            item_idxs = unpinned_item_idxs\r\n            num_items -= num_pinned_items\r\n            const pinned_total = numUtils.toFixedNumber(parseFloat(this.state.pinned_total) * 100, 0)\r\n            updatedTarget = numUtils.toFixedNumber(updatedTarget - pinned_total, 2)\r\n        }\r\n\r\n        // init table for dp\r\n        let T = new Array(num_items+1)\r\n        for (let i = 0; i <= num_items; i++) {\r\n            T[i] = new Array(updatedTarget+1)\r\n            T[i][0] = 0\r\n        }\r\n        for (let i = 0; i <= updatedTarget; i++) {\r\n            T[0][i] = 0\r\n        }\r\n\r\n        // fill table using dp\r\n        for (let i = 1; i <= num_items; i++) {\r\n            for (let j = 1; j <= updatedTarget; j++) {\r\n                const current_item_price = item_prices[i-1]\r\n                const target_without = T[i-1][j]\r\n                if (current_item_price <= j) {\r\n                    const target_with = T[i-1][j-current_item_price]+current_item_price\r\n                    T[i][j] = Math.max(target_with, target_without);\r\n                } else {\r\n                    T[i][j] = target_without\r\n                }\r\n            }\r\n        }\r\n\r\n        // get total cost and remainder of selected items\r\n        const pinned_total = this.state.pinned_total\r\n        const unpinned_total = numUtils.toFixedNumber(T[num_items][updatedTarget] / 100., 2)\r\n        let total = numUtils.toFixedNumber(pinned_total + unpinned_total, 2)\r\n        let remainder = numUtils.toFixedNumber((target / 100.) - total, 2)\r\n\r\n        // set total cost and remainder to strings\r\n        total = total.toFixed(2)\r\n        remainder = remainder.toFixed(2)\r\n\r\n        // get selected items\r\n        let item_selections = this.state.item_selections\r\n        let selected_items_idxs = []\r\n        let curr_item_idx = num_items\r\n        let curr_target_idx = updatedTarget\r\n        while (curr_item_idx > 0 && curr_target_idx > 0) {\r\n            // curr item not used\r\n            if (T[curr_item_idx][curr_target_idx] === T[curr_item_idx-1][curr_target_idx]) {\r\n                curr_item_idx--\r\n                continue\r\n            }\r\n            // curr item used\r\n            console.log(\"idx used: \" + curr_item_idx)\r\n            selected_items_idxs.push(item_idxs[curr_item_idx-1])\r\n            curr_target_idx -= item_prices[curr_item_idx-1]\r\n            curr_item_idx--\r\n        }\r\n        selected_items_idxs.map(idx => {\r\n            item_selections[idx] = true\r\n        })\r\n\r\n        // update state\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: remainder,\r\n            total: total,\r\n        })\r\n    }\r\n\r\n    sort_items = (sort_by, desc) => {\r\n        // grab item vars\r\n        const inputs = this.state.inputs\r\n        const item_names = this.state.item_names\r\n        const item_prices = this.state.item_prices.map(price => {\r\n            // check for new items w/out price\r\n            if (price === \"\") {\r\n                price = \"0.00\"\r\n            }\r\n            return numUtils.toFixedNumber(parseFloat(price), 2)\r\n        })\r\n        const item_selections = this.state.item_selections\r\n        const pinned_items = this.state.pinned_items\r\n\r\n        // put item properties into one object for sorting\r\n        let items = []\r\n        for (let i = 0; i < item_prices.length; i++) {\r\n            items.push({\r\n                input: inputs[i],\r\n                name: item_names[i],\r\n                price: item_prices[i],\r\n                selected: item_selections[i],\r\n                pinned: pinned_items[i],\r\n            })\r\n        }\r\n\r\n        // sort items\r\n        this.sort_by_attr(items, sort_by, desc)\r\n\r\n        // get item vars in sorted order\r\n        let sorted_inputs = []\r\n        let sorted_item_names = []\r\n        let sorted_item_prices = []\r\n        let sorted_item_selections = []\r\n        let sorted_pinned_items = []\r\n        for (let i = 0; i < items.length; i++) {\r\n            sorted_inputs.push(items[i].input)\r\n            sorted_item_names.push(items[i].name)\r\n            sorted_item_prices.push((items[i].price).toFixed(2))\r\n            sorted_item_selections.push(items[i].selected)\r\n            sorted_pinned_items.push(items[i].pinned)\r\n        }\r\n\r\n        // update state\r\n        this.setState({\r\n            inputs: sorted_inputs,\r\n            item_names: sorted_item_names,\r\n            item_prices: sorted_item_prices,\r\n            item_selections: sorted_item_selections,\r\n            pinned_items: sorted_pinned_items,\r\n        })\r\n    }\r\n\r\n    sort_by_attr = (items, attr, desc) => {\r\n        // descending\r\n        if (desc) {\r\n            items.sort((a, b) => {\r\n                if (a[attr] > b[attr]) {\r\n                    return -1\r\n                } else if (a[attr] < b[attr]) {\r\n                    return 1\r\n                }\r\n                return 0\r\n            })\r\n        }\r\n        // ascending\r\n        else {\r\n            items.sort((a, b) => {\r\n                if (a[attr] < b[attr]) {\r\n                    return -1\r\n                } else if (a[attr] > b[attr]) {\r\n                    return 1\r\n                }\r\n                return 0\r\n            })\r\n        }\r\n    }\r\n\r\n    /* MENU VISUALS */\r\n\r\n    // render menu\r\n    render_menu = () => {\r\n        // dynamic classname for indicating selections\r\n        let menu_item_id = \"unselected\"\r\n        if (this.state.menu_pin_selected === true) {\r\n            menu_item_id = \"selected\"\r\n        }\r\n\r\n        return (\r\n            <div className=\"main_menu\">\r\n                <div className={\"menu_item-section-\"+menu_item_id} id=\"clear-pins\">\r\n                    <div\r\n                        className=\"clear_pins_icon\"\r\n                        onClick={() => {this.clear_pins()}}>\r\n                    </div>\r\n                </div>\r\n                <div className=\"menu_item-section\" id=\"space\"/>\r\n                <div className=\"menu_item-section\" id=\"sort\">\r\n                    <div\r\n                        className={\"sort_button\"}\r\n                        onClick={() => {}}>\r\n                        Sort By\r\n                    </div>\r\n                    <div className=\"sort_menu\">\r\n                        <div>A-Z</div>\r\n                        <div>Z-A</div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* MENU LOGIC */\r\n\r\n    // clear all pinned items\r\n    clear_pins = () => {\r\n        this.setState({\r\n            num_pinned_items: 0,\r\n            pinned_items: new Array(this.state.pinned_items.length).fill(false),\r\n            pinned_total: 0,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    /* FORM VISUALS */\r\n\r\n    // renders item inputs\r\n    render_input = (index) => {\r\n        // dynamic classname for indicating selections\r\n        let input_group_id = \"unselected\"\r\n        if (this.state.item_selections[index] === true) {\r\n            input_group_id = \"selected\"\r\n        }\r\n\r\n        // dynamic classname for indicating pinned items\r\n        let pin_icon_id = \"unselected\"\r\n        if (this.state.pinned_items[index] === true) {\r\n            pin_icon_id = \"selected\"\r\n        }\r\n\r\n        // render input group\r\n        return (\r\n            <div className={\"input_group-\"+input_group_id} key={index}>\r\n                {/* PIN BUTTON */}\r\n                <div className=\"input_group-section\" id=\"pin\">\r\n                    <div\r\n                        className={\"pin_icon-\"+pin_icon_id}\r\n                        onClick={(e) => {this.toggle_pin_input(e, index)}}>\r\n                    </div>\r\n                </div>\r\n                {/* ITEM NAME */}\r\n                <div className=\"input_group-section\" id=\"name\">\r\n                    <input\r\n                        className={\"input_group-input-name-\"+input_group_id}\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Item\"\r\n                        value={this.state.item_names[index]}\r\n                        onChange={(e) => this.handle_item_name_change(e, index)}\r\n                        onKeyDown={(e) => this.handle_enter(e, index)}\r\n                    />\r\n                </div>\r\n                {/* ITEM PRICE */}\r\n                <div className=\"input_group-section\" id=\"price\">\r\n                    <div className=\"input_group-label\">$</div>\r\n                    <input\r\n                        className={\"input_group-input-price-\"+input_group_id}\r\n                        type=\"text\"\r\n                        inputMode=\"numeric\"\r\n                        placeholder=\"0.00\"\r\n                        value={this.state.item_prices[index]}\r\n                        onClick={(e) => this.handle_item_price_click(e, index)}\r\n                        onChange={(e) => this.handle_item_price_change(e, index)}\r\n                        onBlur={(e) => this.check_price(e, index)}\r\n                    />\r\n                </div>\r\n                {/* CLOSE BUTTON */}\r\n                <div className=\"input_group-section\" id=\"close\">\r\n                    <div\r\n                        className=\"remove_icon\"\r\n                        onClick={(e) => {this.remove_input(e, index)}}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // resize input based on input value length\r\n    resizeInput = (input) => {\r\n        input.style.width = input.value.length + \"ch\"\r\n    }\r\n\r\n    /* FORM LOGIC - ADDING & REMOVING ITEMS */\r\n\r\n    // add item\r\n    append_input = (index) => {\r\n        // add item at index\r\n        let inputs = this.state.inputs\r\n        let item_names = this.state.item_names\r\n        let item_prices = this.state.item_prices\r\n        let item_selections = this.state.item_selections\r\n        let pinned_items = this.state.pinned_items\r\n        inputs = inputs.concat([this.state.inputs.length])\r\n        if (index === -1) {\r\n            item_names = item_names.concat(\"\")\r\n            item_prices = item_prices.concat(\"\")\r\n            item_selections = item_selections.concat(false)\r\n            pinned_items = pinned_items.concat(false)\r\n        } else {\r\n            item_names.splice(index, 0, \"\")\r\n            item_prices.splice(index, 0, \"\")\r\n            item_selections.splice(index, 0, false)\r\n            pinned_items.splice(index, 0, false)\r\n        }\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            inputs: inputs,\r\n            item_names: item_names,\r\n            item_prices: item_prices,\r\n            item_selections: item_selections,\r\n            pinned_items: pinned_items,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // remove item\r\n    remove_input = (e, index) => {\r\n        // stop auto refresh\r\n        e.preventDefault()\r\n\r\n        // grab item vars\r\n        const updated_inputs = this.state.inputs\r\n        const updated_item_names = this.state.item_names\r\n        const updated_item_prices = this.state.item_prices\r\n        const updated_item_selections = this.state.item_selections\r\n        const updated_pinned_items = this.state.pinned_items\r\n\r\n        // check if pinned item\r\n        if (updated_pinned_items[index]) {\r\n            this.toggle_pin_input(e, index)\r\n        }\r\n\r\n        // remove item\r\n        updated_inputs.pop()\r\n        updated_item_names.splice(index, 1)\r\n        updated_item_prices.splice(index, 1)\r\n        updated_item_selections.splice(index, 1)\r\n        updated_pinned_items.splice(index, 1)\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            inputs: updated_inputs,\r\n            item_names: updated_item_names,\r\n            item_prices: updated_item_prices,\r\n            item_selections: updated_item_selections,\r\n            pinned_items: updated_pinned_items,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // new item on enter\r\n    handle_enter = (e, index) => {\r\n        if (e.key === \"Enter\") {\r\n            this.append_input(index+1)\r\n            this.reset_item_selections()\r\n        }\r\n    }\r\n\r\n    /* FORM LOGIC - UPDATING VALUES */\r\n\r\n    // target click handler\r\n    handle_target_click = (e) => {\r\n        // save original price\r\n        const saved_price = e.target.value\r\n\r\n        // update placeholder with original price\r\n        document.getElementById(\"target-input\").setAttribute(\"placeholder\", saved_price)\r\n\r\n        // clear price\r\n        let target = this.state.target\r\n        target = \"\"\r\n        this.setState({\r\n            saved_price: saved_price,\r\n            target: target,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // target change handler\r\n    handle_target_change = (e) => {\r\n        let input = e.target.value\r\n        if (this.REGEX_PRICE.test(input)) {\r\n            // make sure target is below max budget\r\n            const price = numUtils.toFixedNumber(parseFloat(input), 2)\r\n            if (isNaN(price) || price <= this.MAX_TARGET) {\r\n                // update state & reset selections\r\n                this.setState({\r\n                    target: input,\r\n                }, function() {\r\n                    this.reset_item_selections()\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // pin & unpin item for selection\r\n    toggle_pin_input = (e, index) => {\r\n        // grab pinned vars\r\n        let pinned_items = this.state.pinned_items\r\n        let pinned_total = this.state.pinned_total\r\n        const item_prices = this.state.item_prices\r\n        let pinned_item_price = numUtils.toFixedNumber(parseFloat(item_prices[index]), 2)\r\n        // pinned item price is being changed - use saved price\r\n        if (item_prices[index] === \"\") {\r\n            const saved_price = this.state.saved_price\r\n            pinned_item_price = numUtils.toFixedNumber(parseFloat(saved_price), 2)\r\n        }\r\n        let num_pinned_items = this.state.num_pinned_items\r\n\r\n        // pin\r\n        if (!pinned_items[index]) {\r\n            // check if pinning item goes over target\r\n            const target = numUtils.toFixedNumber(parseFloat(this.state.target), 2)\r\n            if (pinned_total + pinned_item_price <= target) {\r\n                // pin item and update pinned vars\r\n                pinned_items[index] = true\r\n                pinned_total = numUtils.toFixedNumber(pinned_total + pinned_item_price, 2)\r\n                num_pinned_items += 1\r\n            }\r\n        }\r\n        // unpin\r\n        else {\r\n            // unpin item and update pinned vars\r\n            pinned_items[index] = false\r\n            pinned_total = numUtils.toFixedNumber(pinned_total - pinned_item_price, 2)\r\n            num_pinned_items -= 1\r\n        }\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            num_pinned_items: num_pinned_items,\r\n            pinned_items: pinned_items,\r\n            pinned_total: pinned_total,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // item names change handler\r\n    handle_item_name_change = (e, index) => {\r\n        let item_names = this.state.item_names\r\n        item_names[index] = e.target.value\r\n        this.setState({\r\n            item_names: item_names,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // item prices click handler\r\n    handle_item_price_click = (e, index) => {\r\n        // save original price\r\n        const saved_price = e.target.value\r\n\r\n        // update placeholder with original price\r\n        // if new item, saved price will be empty, so update placeholder\r\n        let placeholder = saved_price\r\n        if (placeholder === \"\") {\r\n            placeholder = \"0.00\"\r\n        }\r\n        // find number of pinned items prior to current item (affects index)\r\n        const pinned_items = this.state.pinned_items\r\n        let num_pinned_prior = 0\r\n        for (let i = 0; i < index; i++) {\r\n            if (pinned_items[i]) {\r\n                num_pinned_prior++\r\n            }\r\n        }\r\n        // current item pinned\r\n        if (pinned_items[index]) {\r\n            document.getElementsByClassName(\"input_group-input-price-selected\")[num_pinned_prior]\r\n                .setAttribute(\"placeholder\", placeholder)\r\n        }\r\n        // current item not pinned\r\n        else {\r\n            document.getElementsByClassName(\"input_group-input-price-unselected\")[index-num_pinned_prior]\r\n                .setAttribute(\"placeholder\", placeholder)\r\n        }\r\n\r\n        // clear price\r\n        let item_prices = this.state.item_prices\r\n        item_prices[index] = \"\"\r\n        this.setState({\r\n            item_prices: item_prices,\r\n            saved_price: saved_price,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // item prices change handler\r\n    handle_item_price_change = (e, index) => {\r\n        // unpin item if pinned\r\n        const updated_pinned_items = this.state.pinned_items\r\n        if (updated_pinned_items[index]) {\r\n            this.toggle_pin_input(e, index)\r\n        }\r\n\r\n        let input = e.target.value\r\n        if (this.REGEX_PRICE.test(input)) {\r\n            let item_prices = this.state.item_prices\r\n            item_prices[index] = input\r\n            this.setState({\r\n                item_prices: item_prices,\r\n            }, function() {\r\n                this.reset_item_selections()\r\n            })\r\n        }\r\n    }\r\n\r\n    /* FORM VISUALS - PRICE STRING FORMATTING */\r\n\r\n    // standardizes price string format\r\n    format_price_string = (input) => {\r\n        // check decimals\r\n        input = this.format_decimals_string(input)\r\n\r\n        // trim leading zeros\r\n        input = input.replace(/^0+/, '')\r\n        if (input.slice(0, 1) === \".\") {\r\n            input = \"0\" + input\r\n        }\r\n\r\n        return input\r\n    }\r\n\r\n    // standardizes decimals in price string\r\n    format_decimals_string = (input) => {\r\n        // no decimals\r\n        if (!input.includes('.')) {\r\n            return input + \".00\"\r\n        }\r\n        // incomplete decimals\r\n        if (this.REGEX_DECIMALS.test(input)) {\r\n            // ends with decimal\r\n            if (input.slice(-1) === '.') {\r\n                return input + \"00\"\r\n            }\r\n            // ends with decimal and one digit\r\n            else {\r\n                return input + \"0\"\r\n            }\r\n        }\r\n        return input\r\n    }\r\n\r\n    // price formatting on blur\r\n    check_price = (e, index) => {\r\n        // check for saved original price & reset saved price\r\n        let input = e.target.value\r\n        let saved_price = this.state.saved_price\r\n        if (input === \"\" && saved_price !== \"\") {\r\n            input = saved_price\r\n        }\r\n        saved_price = \"\"\r\n\r\n        // format input\r\n        input = this.format_price_string(input)\r\n\r\n        // update item price\r\n        let item_prices = this.state.item_prices\r\n        item_prices[index] = input\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            item_prices: item_prices,\r\n            saved_price: saved_price,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // target formatting on blur\r\n    check_target = (e) => {\r\n        // check for saved original price & reset saved price\r\n        let input = e.target.value\r\n        let saved_price = this.state.saved_price\r\n        if (input === \"\" && saved_price !== \"\") {\r\n            input = saved_price\r\n        }\r\n        saved_price = \"\"\r\n\r\n        // format input\r\n        input = this.format_price_string(input)\r\n\r\n        // update state\r\n        this.setState({\r\n            target: input,\r\n        }, function() {\r\n            // resize target input\r\n            const targetInput = document.getElementById(\"target-input\")\r\n            this.resizeInput(targetInput)\r\n\r\n            // reset selections\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    reset_item_selections = () => {\r\n        // reset all item selections to pinned - deep copy\r\n        let item_selections = JSON.parse(JSON.stringify(this.state.pinned_items))\r\n\r\n        // reset total and remainder, accounting for pinned items\r\n        const pinned_total = this.state.pinned_total\r\n        const total = this.format_price_string(\"\" + pinned_total)\r\n        const remainder = numUtils.toFixedNumber(this.state.target - pinned_total, 2)\r\n        const remainderStr = this.format_price_string(\"\" + remainder)\r\n\r\n        // update state\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: remainderStr,\r\n            total: total\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"KnapsackCalculator\">\r\n                {/* HEADERS */}\r\n                <div className=\"header_top\">\r\n                    <div className=\"header_top_main\">\r\n                        <div className=\"header_top_main-label\">Budget</div>\r\n                        <div className=\"header_top_main-input\">\r\n                            <div className=\"header_top_main-input-label\">$</div>\r\n                            <input\r\n                                className=\"input_group-input\"\r\n                                id=\"target-input\"\r\n                                type=\"text\"\r\n                                inputMode=\"numeric\"\r\n                                value={this.state.target}\r\n                                onClick={(e) => this.handle_target_click(e)}\r\n                                onChange={(e) => this.handle_target_change(e)}\r\n                                onBlur={(e) => this.check_target(e)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"header_top_secondary\">\r\n                        <div className=\"header_top_secondary-section\" id=\"total\">\r\n                            <div className=\"header_top_secondary-label\">Total</div>\r\n                            <div className=\"header_top_secondary-value\">{\"$\"+this.state.total}</div>\r\n                        </div>\r\n                        <div className=\"header_top_secondary-section\" id=\"remaining\">\r\n                            <div className=\"header_top_secondary-label\">Remaining</div>\r\n                            <div className=\"header_top_secondary-value\">{\"$\"+this.state.remainder}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* MENU BAR */}\r\n                {this.render_menu()}\r\n                {/* ITEM INPUTS */}\r\n                <form>\r\n                    {this.state.inputs.map((input, index) => {\r\n                        return this.render_input(index)\r\n                    })}\r\n                </form>\r\n                {/* BUTTONS */}\r\n                <div className=\"button_group\">\r\n                    <div className=\"button\" id=\"add-item\" onClick={() => this.append_input(-1)} />\r\n                    <div className=\"button\" id=\"calculate\" onClick={() => this.calculate_solution()} />\r\n                </div>\r\n                {/* <div className=\"button_group\">\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_INPUT, true)}>#D</div>\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_INPUT, false)}>#A</div>\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_NAME, true)}>@D</div>\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_NAME, false)}>@A</div>\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_PRICE, true)}>$D</div>\r\n                    <div className=\"button\" id=\"sort\" onClick={() => this.sort_items(this.SORT_BY_PRICE, false)}>$A</div>\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport KnapsackCalculator from './knapsack-calculator/knapsack-calculator';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <KnapsackCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}