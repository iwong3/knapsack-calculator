{"version":3,"sources":["knapsack-calculator/knapsack-calculator.js","reportWebVitals.js","index.js"],"names":["KnapsackCalculator","props","MAX_TARGET","REGEX_DECIMALS","REGEX_PRICE","REGEX_PRICE_RTL","calculate_solution","reset_item_selections","item_prices","state","map","price","toFixedNumber","parseFloat","item_idxs","JSON","parse","stringify","inputs","num_items","length","target","updatedTarget","num_pinned_items","pinned_items","unpinned_item_prices","unpinned_item_idxs","i","push","pinned_total","T","Array","j","current_item_price","target_without","target_with","Math","max","unpinned_total","total","remainder","toFixed","item_selections","selected_items_idxs","curr_item_idx","curr_target_idx","console","log","idx","setState","num","decimals","pow","round","render_input","index","input_group_id","pin_icon_id","className","id","onClick","e","toggle_pin_input","type","placeholder","value","item_names","onChange","handle_item_name_change","onKeyDown","handle_enter","dir","handle_item_price_change","onBlur","check_price","remove_input","append_input","concat","splice","this","preventDefault","updated_inputs","updated_item_names","updated_item_prices","updated_item_selections","updated_pinned_items","pop","key","handle_target_change","input","substring","test","isNaN","pinned_item_price","slice","replace","format_price_string","format_decimals_string","check_target","remainderStr","bind","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b85ee74.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './knapsack-calculator.css';\r\n\r\n\r\n/**\r\n *  TODO:\r\n *  - functionality\r\n *      - price formatting\r\n *          - when clicking on price, get ready to re-input? unless no change, then keep prev value\r\n *      - look into O(W) space version of dp knapsack\r\n *      - remove item - update pinned totals/remaining\r\n *      - updating price should unpin item\r\n *      - show list of selected items\r\n *      - input for quantity (think about how to handle quantity, not trivial)\r\n *      - sort orders (price, alphabetical, input order)\r\n *      - click and drag/drop\r\n *      - reset button w/ confirmation?\r\n *      - calculate in sorted order - if not all items of a price are selected, show \"pick x\"\r\n *      - focus on new item when pressing enter\r\n *      - improve price input: start from right (last two always decimals)\r\n *      - unpin all button\r\n *  - bugs\r\n *  - styling\r\n *      - top always visible\r\n *      - add / calculate always visible\r\n *      - close icon has fixed width - spacing is weird because its wrapped by div\r\n *  - design\r\n *      - think about separate components\r\n *      - think about moving functions to utility files\r\n */\r\nexport default class KnapsackCalculator extends Component {\r\n\r\n    // price vars\r\n    MAX_TARGET = 9999.99\r\n\r\n    // price regex\r\n    REGEX_DECIMALS = /(\\.\\d{0,1})$/\r\n    REGEX_PRICE = /^((\\d)*(\\.\\d{0,2})?)$/\r\n    REGEX_PRICE_RTL = /^((\\d)*(\\.)?(\\d)*)$/\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            inputs: [0, 1, 2, 3, 4],\r\n            item_names: [\"soda\", \"watermelon\", \"chips\", \"pomegranate\", \"pie\"],\r\n            item_prices: [\"0.99\", \"5.99\", \"1.99\", \"2.99\", \"3.14\"],\r\n            item_selections: [false, false, false, false, false],\r\n            num_pinned_items: 0,\r\n            pinned_items: [false, false, false, false, false],\r\n            pinned_total: 0,\r\n            remainder: \"10.00\",\r\n            target: \"10.00\",\r\n            total: \"0.00\",\r\n        }\r\n\r\n        this.calculate_solution = this.calculate_solution.bind(this)\r\n        this.render_input = this.render_input.bind(this)\r\n        this.append_input = this.append_input.bind(this)\r\n        this.remove_input = this.remove_input.bind(this)\r\n        this.handle_item_name_change = this.handle_item_name_change.bind(this)\r\n        this.handle_item_price_change = this.handle_item_price_change.bind(this)\r\n        this.handle_target_change = this.handle_target_change.bind(this)\r\n        this.check_price = this.check_price.bind(this)\r\n        this.check_target = this.check_target.bind(this)\r\n        this.reset_item_selections = this.reset_item_selections.bind(this)\r\n    }\r\n\r\n    /* CORE ALGORITHMS */\r\n\r\n    calculate_solution = () => {\r\n        // reset selections\r\n        this.reset_item_selections()\r\n\r\n        // init vars for knapsack\r\n        let item_prices = this.state.item_prices.map(price => {\r\n            return this.toFixedNumber(parseFloat(price) * 100, 0)\r\n        })\r\n        let item_idxs = JSON.parse(JSON.stringify(this.state.inputs))\r\n        let num_items = item_prices.length\r\n        let target = this.toFixedNumber(parseFloat(this.state.target) * 100, 0)\r\n        let updatedTarget = target\r\n\r\n        // filter out pinned items\r\n        const num_pinned_items = this.state.num_pinned_items\r\n        if (num_pinned_items > 0) {\r\n            // get unpinned item vars\r\n            const pinned_items = this.state.pinned_items\r\n            let unpinned_item_prices = []\r\n            let unpinned_item_idxs = []\r\n            for (let i = 0; i < pinned_items.length; i++) {\r\n                if (!pinned_items[i]) {\r\n                    unpinned_item_prices.push(item_prices[i])\r\n                    unpinned_item_idxs.push(i)\r\n                }\r\n            }\r\n\r\n            // use unpinned item vars\r\n            item_prices = unpinned_item_prices\r\n            item_idxs = unpinned_item_idxs\r\n            num_items -= num_pinned_items\r\n            const pinned_total = this.toFixedNumber(parseFloat(this.state.pinned_total) * 100, 0)\r\n            updatedTarget = this.toFixedNumber(updatedTarget - pinned_total, 2)\r\n        }\r\n\r\n        // init table for dp\r\n        let T = new Array(num_items+1)\r\n        for (let i = 0; i <= num_items; i++) {\r\n            T[i] = new Array(updatedTarget+1)\r\n            T[i][0] = 0\r\n        }\r\n        for (let i = 0; i <= updatedTarget; i++) {\r\n            T[0][i] = 0\r\n        }\r\n\r\n        // fill table using dp\r\n        for (let i = 1; i <= num_items; i++) {\r\n            for (let j = 1; j <= updatedTarget; j++) {\r\n                const current_item_price = item_prices[i-1]\r\n                const target_without = T[i-1][j]\r\n                if (current_item_price <= j) {\r\n                    const target_with = T[i-1][j-current_item_price]+current_item_price\r\n                    T[i][j] = Math.max(target_with, target_without);\r\n                } else {\r\n                    T[i][j] = target_without\r\n                }\r\n            }\r\n        }\r\n\r\n        // get total cost and remainder of selected items\r\n        const pinned_total = this.state.pinned_total\r\n        const unpinned_total = this.toFixedNumber(T[num_items][updatedTarget] / 100., 2)\r\n        let total = this.toFixedNumber(pinned_total + unpinned_total, 2)\r\n        let remainder = this.toFixedNumber((target / 100.) - total, 2)\r\n\r\n        // set total cost and remainder to strings\r\n        total = total.toFixed(2)\r\n        remainder = remainder.toFixed(2)\r\n\r\n        // get selected items\r\n        let item_selections = this.state.item_selections\r\n        let selected_items_idxs = []\r\n        let curr_item_idx = num_items\r\n        let curr_target_idx = updatedTarget\r\n        while (curr_item_idx > 0 && curr_target_idx > 0) {\r\n            // curr item not used\r\n            if (T[curr_item_idx][curr_target_idx] === T[curr_item_idx-1][curr_target_idx]) {\r\n                curr_item_idx--\r\n                continue\r\n            }\r\n            // curr item used\r\n            console.log(\"idx used: \" + curr_item_idx)\r\n            selected_items_idxs.push(item_idxs[curr_item_idx-1])\r\n            curr_target_idx -= item_prices[curr_item_idx-1]\r\n            curr_item_idx--\r\n        }\r\n        selected_items_idxs.map(idx => {\r\n            item_selections[idx] = true\r\n        })\r\n\r\n        // update state\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: remainder,\r\n            total: total\r\n        })\r\n    }\r\n\r\n    /* LOGIC HELPERS */\r\n\r\n    // get number with fixed decimal spaces\r\n    toFixedNumber = (num, decimals) => {\r\n        const pow = Math.pow(10, decimals)\r\n        return Math.round(num * pow) / pow;\r\n    }\r\n\r\n    /* FORM VISUALS */\r\n\r\n    // renders item inputs\r\n    render_input = (index) => {\r\n        // dynamic classname for indicating selections\r\n        let input_group_id = \"unselected\"\r\n        if (this.state.item_selections[index] === true) {\r\n            input_group_id = \"selected\"\r\n        }\r\n\r\n        // dynamic classname for indicating pinned items\r\n        let pin_icon_id = \"unselected\"\r\n        if (this.state.pinned_items[index] === true) {\r\n            pin_icon_id = \"selected\"\r\n        }\r\n\r\n        // render input group\r\n        return (\r\n            <div className=\"input_group\" id={input_group_id} key={index}>\r\n                {/* PIN BUTTON */}\r\n                <div className=\"input_group-section\" id=\"pin\">\r\n                    <div\r\n                        className=\"pin_icon\"\r\n                        id={pin_icon_id}\r\n                        onClick={(e) => {this.toggle_pin_input(e, index)}}>\r\n                    </div>\r\n                </div>\r\n                {/* ITEM NAME */}\r\n                <div className=\"input_group-section\" id=\"name\">\r\n                    <input\r\n                        className=\"input_group-input\"\r\n                        id={input_group_id}\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Item\"\r\n                        value={this.state.item_names[index]}\r\n                        onChange={(e) => this.handle_item_name_change(e, index)}\r\n                        onKeyDown={(e) => this.handle_enter(e, index)}\r\n                    />\r\n                </div>\r\n                {/* ITEM PRICE */}\r\n                <div className=\"input_group-section\" id=\"price\">\r\n                    <div className=\"input_group-label\">$</div>\r\n                    <input\r\n                        className=\"input_group-input\"\r\n                        id={input_group_id}\r\n                        type=\"text\"\r\n                        placeholder=\"0.00\"\r\n                        value={this.state.item_prices[index]}\r\n                        dir=\"rtl\"\r\n                        onChange={(e) => this.handle_item_price_change(e, index)}\r\n                        onBlur={(e) => this.check_price(e, index)}\r\n                    />\r\n                </div>\r\n                {/* CLOSE BUTTON */}\r\n                <div className=\"input_group-section\" id=\"close\">\r\n                    <div\r\n                        className=\"remove_icon\"\r\n                        onClick={(e) => {this.remove_input(e, index)}}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* FORM LOGIC - ADDING & REMOVING ITEMS */\r\n\r\n    // add item\r\n    append_input = (index) => {\r\n        // add item at index\r\n        let inputs = this.state.inputs\r\n        let item_names = this.state.item_names\r\n        let item_prices = this.state.item_prices\r\n        let item_selections = this.state.item_selections\r\n        let pinned_items = this.state.pinned_items\r\n        inputs = inputs.concat([this.state.inputs.length])\r\n        if (index === -1) {\r\n            item_names = item_names.concat(\"\")\r\n            item_prices = item_prices.concat(\"\")\r\n            item_selections = item_selections.concat(false)\r\n            pinned_items = pinned_items.concat(false)\r\n        } else {\r\n            item_names.splice(index, 0, \"\")\r\n            item_prices.splice(index, 0, \"\")\r\n            item_selections.splice(index, 0, false)\r\n            pinned_items.splice(index, 0, false)\r\n        }\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            inputs: inputs,\r\n            item_names: item_names,\r\n            item_prices: item_prices,\r\n            item_selections: item_selections,\r\n            pinned_items: pinned_items\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // remove item\r\n    remove_input = (e, index) => {\r\n        // stop auto refresh\r\n        e.preventDefault()\r\n\r\n        // remove item\r\n        const updated_inputs = this.state.inputs\r\n        const updated_item_names = this.state.item_names\r\n        const updated_item_prices = this.state.item_prices\r\n        const updated_item_selections = this.state.item_selections\r\n        const updated_pinned_items = this.state.pinned_items\r\n        updated_inputs.pop()\r\n        updated_item_names.splice(index, 1)\r\n        updated_item_prices.splice(index, 1)\r\n        updated_item_selections.splice(index, 1)\r\n        updated_pinned_items.splice(index, 1)\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            inputs: updated_inputs,\r\n            item_names: updated_item_names,\r\n            item_prices: updated_item_prices,\r\n            item_selections: updated_item_selections,\r\n            pinned_items: updated_pinned_items\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // new item on enter\r\n    handle_enter = (e, index) => {\r\n        if (e.key === 'Enter') {\r\n            this.append_input(index+1)\r\n            this.reset_item_selections()\r\n        }\r\n    }\r\n\r\n    /* FORM LOGIC - UPDATING VALUES */\r\n\r\n    // target handler\r\n    handle_target_change = (e) => {\r\n        let input = e.target.value.substring(1)\r\n        if (this.REGEX_PRICE.test(input)) {\r\n            // make sure target is below max budget\r\n            const price = this.toFixedNumber(parseFloat(input), 2)\r\n            if (isNaN(price) || price <= this.MAX_TARGET) {\r\n                this.setState({\r\n                    target: input\r\n                }, function() {\r\n                    this.reset_item_selections()\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // pin & unpin item for selection\r\n    toggle_pin_input = (e, index) => {\r\n        // grab pin and price vars\r\n        let pinned_items = this.state.pinned_items\r\n        let pinned_total = this.state.pinned_total\r\n        const item_prices = this.state.item_prices\r\n        const pinned_item_price = this.toFixedNumber(parseFloat(item_prices[index]), 2)\r\n        let num_pinned_items = this.state.num_pinned_items\r\n\r\n        // pin\r\n        if (!pinned_items[index]) {\r\n            // check if pinning item goes over target\r\n            const target = this.toFixedNumber(parseFloat(this.state.target), 2)\r\n            if (pinned_total + pinned_item_price <= target) {\r\n                // pin item and update pinned vars\r\n                pinned_items[index] = true\r\n                pinned_total = this.toFixedNumber(pinned_total + pinned_item_price, 2)\r\n                num_pinned_items += 1\r\n            }\r\n        }\r\n        // unpin\r\n        else {\r\n            // unpin item and update pinned vars\r\n            pinned_items[index] = false\r\n            pinned_total = this.toFixedNumber(pinned_total - pinned_item_price, 2)\r\n            num_pinned_items -= 1\r\n        }\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            num_pinned_items: num_pinned_items,\r\n            pinned_items: pinned_items,\r\n            pinned_total: pinned_total,\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // item names handler\r\n    handle_item_name_change = (e, index) => {\r\n        let item_names = this.state.item_names\r\n        item_names[index] = e.target.value\r\n        this.setState({\r\n            item_names: item_names\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // item prices handler\r\n    handle_item_price_change = (e, index) => {\r\n        let input = e.target.value\r\n        if (this.REGEX_PRICE_RTL.test(input)) {\r\n            // fix decimals\r\n            if (input.length >= 3 && input.slice(-1) !== '.') {\r\n                input = input.replace('.', '')\r\n                input = input.slice(0, -2) + '.' + input.slice(-2)\r\n            }\r\n            let item_prices = this.state.item_prices\r\n            item_prices[index] = input\r\n            this.setState({\r\n                item_prices: item_prices\r\n            }, function() {\r\n                this.reset_item_selections()\r\n            })\r\n        }\r\n    }\r\n\r\n    /* FORM VISUALS - PRICE STRING FORMATTING */\r\n\r\n    // standardizes price string format\r\n    format_price_string = (input) => {\r\n        // check decimals\r\n        input = this.format_decimals_string(input)\r\n\r\n        // trim leading zeros\r\n        input = input.replace(/^0+/, '')\r\n        if (input.slice(0, 1) === \".\") {\r\n            input = \"0\" + input\r\n        }\r\n\r\n        return input\r\n    }\r\n\r\n    // standardizes decimals in price string (rtl)\r\n    format_decimals_string = (input) => {\r\n        if (input.length === 1) {\r\n            return \".0\" + input\r\n        }\r\n        if (input.length === 2) {\r\n            return \".\" + input\r\n        }\r\n        if (input.slice(-1) === '.') {\r\n            return input + \"00\"\r\n        }\r\n        return input\r\n    }\r\n\r\n    // price formatting on blur\r\n    check_price = (e, index) => {\r\n        // format input\r\n        let input = e.target.value\r\n        input = this.format_price_string(input)\r\n\r\n        // update item price\r\n        let item_prices = this.state.item_prices\r\n        item_prices[index] = input\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            item_prices: item_prices\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    // target formatting on blur\r\n    check_target = (e) => {\r\n        // format input\r\n        let input = e.target.value.substring(1)\r\n        input = this.format_price_string(input)\r\n\r\n        // update state & reset selections\r\n        this.setState({\r\n            target: input\r\n        }, function() {\r\n            this.reset_item_selections()\r\n        })\r\n    }\r\n\r\n    reset_item_selections = () => {\r\n        // reset all item selections to pinned - deep copy\r\n        let item_selections = JSON.parse(JSON.stringify(this.state.pinned_items))\r\n\r\n        // reset total and remainder, accounting for pinned items\r\n        const pinned_total = this.state.pinned_total\r\n        const total = this.format_price_string(\"\" + pinned_total)\r\n        const remainder = this.toFixedNumber(this.state.target - pinned_total, 2)\r\n        const remainderStr = this.format_price_string(\"\" + remainder)\r\n\r\n        // update state\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: remainderStr,\r\n            total: total\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"KnapsackCalculator\">\r\n                {/* HEADERS */}\r\n                <div className=\"header_top\">\r\n                    <div className=\"header1\">\r\n                        <div className=\"header1-label\">Budget</div>\r\n                        <input\r\n                            className=\"input_group-input\"\r\n                            id=\"target-input\"\r\n                            type=\"text\"\r\n                            value={\"$\"+this.state.target}\r\n                            onChange={(e) => this.handle_target_change(e)}\r\n                            onBlur={(e) => this.check_target(e)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"header2\">\r\n                        <div className=\"header2-section\">\r\n                            <div className=\"header2-label\">Total</div>\r\n                            <div className=\"header2-value\">{\"$\"+this.state.total}</div>\r\n                        </div>\r\n                        <div className=\"header2-section\">\r\n                            <div className=\"header2-label\">Remaining</div>\r\n                            <div className=\"header2-value\">{\"$\"+this.state.remainder}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* ITEM INPUTS */}\r\n                <form>\r\n                    {this.state.inputs.map(index => {\r\n                        return this.render_input(index)\r\n                    })}\r\n                </form>\r\n                {/* BUTTONS */}\r\n                <div className=\"button_group\">\r\n                    <div className=\"button\" id=\"add-item\" onClick={() => this.append_input(-1)}>\r\n                        Add Item\r\n                    </div>\r\n                    <div className=\"button\" id=\"calculate\" onClick={() => this.calculate_solution()}>\r\n                        Calculate\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport KnapsackCalculator from './knapsack-calculator/knapsack-calculator';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <KnapsackCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}