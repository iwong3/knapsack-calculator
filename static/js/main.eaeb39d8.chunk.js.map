{"version":3,"sources":["knapsack-calculator/knapsack-calculator.js","reportWebVitals.js","index.js"],"names":["KnapsackCalculator","props","calculate_solution","reset_item_selections","state","item_names","item_prices","map","price","parseFloat","console","log","item_selections","num_items","length","target","T","Array","i","j","current_item_price","target_without","target_with","Math","max","total","chosen_items_idxs","curr_item_idx","curr_target_idx","push","idx","setState","handle_item_name_change","e","index","value","handle_item_price_change","render_input","input_group_classname","className","type","onChange","onClick","remove_input","append_input","prevState","inputs","concat","preventDefault","updated_inputs","pop","updated_item_names","splice","updated_item_prices","bind","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaeb39d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './knapsack-calculator.css';\r\n\r\n\r\n/**\r\n *  TODO:\r\n *  - dynamic inputs\r\n *      - add inputs\r\n *      - remove inputs\r\n *          - keep existing input values\r\n *  - show results\r\n *      - total\r\n *      - selected items\r\n *  - button to calculate results\r\n *  - input for target\r\n *  - styling\r\n *  - price input restrictions (numbers only)\r\n */\r\nexport default class KnapsackCalculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            inputs: [0, 1, 2],\r\n            item_names: [\"soda\", \"watermelon\", \"gum\"],\r\n            item_prices: [1.99, 5.99, 0.99],\r\n            item_selections: [false, false, false],\r\n            target: 10,\r\n            total: 0,\r\n        }\r\n\r\n        this.calculate_solution = this.calculate_solution.bind(this)\r\n        this.handle_item_name_change = this.handle_item_name_change.bind(this)\r\n        this.handle_item_price_change = this.handle_item_price_change.bind(this)\r\n    }\r\n\r\n    calculate_solution = () => {\r\n\r\n        this.reset_item_selections()\r\n\r\n        // init vars for knapsack\r\n        const item_names = this.state.item_names\r\n        const item_prices = this.state.item_prices.map(price => {\r\n            return parseFloat(price, 10) * 100\r\n        })\r\n        console.log(item_prices)\r\n        let item_selections = this.state.item_selections\r\n        const num_items = item_prices.length\r\n        const target = this.state.target * 100\r\n\r\n        // init table for dp\r\n        let T = new Array(num_items+1)\r\n        for (let i = 0; i <= num_items; i++) {\r\n            T[i] = new Array(target+1)\r\n            T[i][0] = 0\r\n        }\r\n        for (let i = 0; i <= target; i++) {\r\n            T[0][i] = 0\r\n        }\r\n\r\n        // fill table using dp\r\n        for (let i = 1; i <= num_items; i++) {\r\n            for (let j = 1; j <= target; j++) {\r\n                const current_item_price = item_prices[i-1]\r\n                const target_without = T[i-1][j]\r\n                // console.log(\"target without: \" + target_without)\r\n                if (current_item_price <= j) {\r\n                    const target_with = T[i-1][j-current_item_price]+current_item_price\r\n                    // console.log(\"target with: \" + target_with)\r\n                    // console.log(\"1: \" + T[i-1][j-current_item_price])\r\n                    // console.log(\"2: \" + current_item_price)\r\n                    T[i][j] = Math.max(target_with, target_without);\r\n                } else {\r\n                    T[i][j] = target_without\r\n                }\r\n            }\r\n        }\r\n\r\n        // debug T[][]\r\n        // for (let i = 0; i < T.length; i++) {\r\n        //     console.log(T[i])\r\n        // }\r\n\r\n        // get cost of chosen items\r\n        const total = T[num_items][target] / 100.\r\n\r\n        // get chosen items\r\n        let chosen_items_idxs = []\r\n        let curr_item_idx = num_items\r\n        let curr_target_idx = target\r\n        while (curr_item_idx > 0 && curr_target_idx > 0) {\r\n            // curr item not used\r\n            if (T[curr_item_idx][curr_target_idx] === T[curr_item_idx-1][curr_target_idx]) {\r\n                curr_item_idx--\r\n                continue\r\n            }\r\n            // curr item used\r\n            chosen_items_idxs.push(curr_item_idx-1)\r\n            curr_target_idx -= item_prices[curr_item_idx-1]\r\n            curr_item_idx--\r\n        }\r\n\r\n        chosen_items_idxs.map(idx => {\r\n            item_selections[idx] = true\r\n        })\r\n\r\n        console.log(item_selections)\r\n\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            total: total\r\n        })\r\n\r\n    }\r\n\r\n    handle_item_name_change = (e, index) => {\r\n        let item_names = this.state.item_names\r\n        item_names[index] = e.target.value\r\n        this.setState({\r\n            item_names: item_names\r\n        })\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    handle_item_price_change = (e, index) => {\r\n        let item_prices = this.state.item_prices\r\n        item_prices[index] = e.target.value\r\n        this.setState({\r\n            item_prices: item_prices\r\n        })\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    render_input = (index) => {\r\n        let input_group_classname = \"input_group\"\r\n        if (this.state.item_selections[index] === true) {\r\n            input_group_classname = \"input_group-selected\"\r\n        }\r\n        return (\r\n            <div className={input_group_classname}>\r\n                <div className=\"input_group-section\">\r\n                    <div className=\"input_group-label\">Item: </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.item_names[index]}\r\n                        onChange={(e) => {this.handle_item_name_change(e, index)}}\r\n                    />\r\n                </div>\r\n                <div className=\"input_group-section\">\r\n                    <div className=\"input_group-label\">Price: </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.item_prices[index]}\r\n                        onChange={(e) => {this.handle_item_price_change(e, index)}}\r\n                    />\r\n                </div>\r\n                <button onClick={(e) => {this.remove_input(e, index)}}>\r\n                    Remove Item\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    append_input = () => {\r\n        this.setState(prevState => ({\r\n            inputs: prevState.inputs.concat([this.state.inputs.length]),\r\n            item_names: prevState.item_names.concat([\"\"]),\r\n            item_prices: prevState.item_prices.concat([0])\r\n        }))\r\n\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    remove_input = (e, index) => {\r\n        // stop auto refresh\r\n        e.preventDefault()\r\n\r\n        // remove item & update state\r\n        const updated_inputs = this.state.inputs\r\n        updated_inputs.pop()\r\n        const updated_item_names = this.state.item_names\r\n        updated_item_names.splice(index, 1)\r\n        const updated_item_prices = this.state.item_prices\r\n        updated_item_prices.splice(index, 1)\r\n        this.setState({\r\n            inputs: updated_inputs,\r\n            item_names: updated_item_names,\r\n            item_prices: updated_item_prices\r\n        })\r\n\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    reset_item_selections = () => {\r\n        const num_items = this.state.item_prices.length\r\n        let item_selections = []\r\n        for (let i = 0; i < num_items; i++) {\r\n            item_selections.push(false)\r\n        }\r\n        this.setState({\r\n            item_selections: item_selections\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"KnapsackCalculator\">\r\n                <div>Target: </div>\r\n                <div>{this.state.target}</div>\r\n                <div>Total: </div>\r\n                <div>{this.state.total}</div>\r\n                <form>\r\n                    {this.state.inputs.map(index => {\r\n                        return this.render_input(index)\r\n                    })}\r\n                </form>\r\n                <button onClick={() => this.append_input()}>\r\n                    Add Item\r\n                </button>\r\n                <button onClick={() => this.calculate_solution()}>\r\n                    Calculate\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport KnapsackCalculator from './knapsack-calculator/knapsack-calculator';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <KnapsackCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}