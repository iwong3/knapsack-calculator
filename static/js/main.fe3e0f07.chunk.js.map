{"version":3,"sources":["knapsack-calculator/knapsack-calculator.js","reportWebVitals.js","index.js"],"names":["KnapsackCalculator","props","calculate_solution","reset_item_selections","item_prices","state","map","price","parseFloat","item_selections","num_items","length","target","substring","toFixed","T","Array","i","j","current_item_price","target_without","target_with","Math","max","total","remainder","selected_items_idxs","curr_item_idx","curr_target_idx","push","idx","setState","render_input","index","input_group_id","className","id","type","placeholder","value","item_names","onChange","e","handle_item_name_change","handle_item_price_change","onClick","remove_input","append_input","prevState","inputs","concat","preventDefault","updated_inputs","pop","updated_item_names","splice","updated_item_prices","handle_target_change","input","bind","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe3e0f07.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './knapsack-calculator.css';\r\n\r\n\r\n/**\r\n *  TODO:\r\n *  - functionality\r\n *      - show list of selected items\r\n *      - input for quantity (think about how to handle quantity, not trivial)\r\n *      - price input restrictions (numbers only)\r\n *          - stop calculate + show user bad input\r\n *          - limit max $\r\n *      - reset button w/ confirmation?\r\n *  - styling\r\n *      - close icon has fixed width - spacing is weird because its wrapped by div\r\n *  - design\r\n *      - think about separate components\r\n *      - think about moving functions to utility files\r\n */\r\nexport default class KnapsackCalculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            inputs: [0, 1, 2],\r\n            item_names: [\"soda\", \"watermelon\", \"gum\"],\r\n            item_prices: [1.99, 5.99, 0.99],\r\n            item_selections: [false, false, false],\r\n            remainder: \"$10\",\r\n            target: \"$10\",\r\n            total: \"$0\",\r\n        }\r\n\r\n        this.calculate_solution = this.calculate_solution.bind(this)\r\n        this.render_input = this.render_input.bind(this)\r\n        this.append_input = this.append_input.bind(this)\r\n        this.remove_input = this.remove_input.bind(this)\r\n        this.handle_item_name_change = this.handle_item_name_change.bind(this)\r\n        this.handle_item_price_change = this.handle_item_price_change.bind(this)\r\n        this.handle_target_change = this.handle_target_change.bind(this)\r\n        this.reset_item_selections = this.reset_item_selections.bind(this)\r\n    }\r\n\r\n    calculate_solution = () => {\r\n        // reset selections\r\n        this.reset_item_selections()\r\n\r\n        // init vars for knapsack\r\n        const item_prices = this.state.item_prices.map(price => {\r\n            return parseFloat(price, 10) * 100\r\n        })\r\n        let item_selections = this.state.item_selections\r\n        const num_items = item_prices.length\r\n        const target = (parseFloat(this.state.target.substring(1)) * 100).toFixed(0)\r\n\r\n        // init table for dp\r\n        let T = new Array(num_items+1)\r\n        for (let i = 0; i <= num_items; i++) {\r\n            T[i] = new Array(target+1)\r\n            T[i][0] = 0\r\n        }\r\n        for (let i = 0; i <= target; i++) {\r\n            T[0][i] = 0\r\n        }\r\n\r\n        // fill table using dp\r\n        for (let i = 1; i <= num_items; i++) {\r\n            for (let j = 1; j <= target; j++) {\r\n                const current_item_price = item_prices[i-1]\r\n                const target_without = T[i-1][j]\r\n                if (current_item_price <= j) {\r\n                    const target_with = T[i-1][j-current_item_price]+current_item_price\r\n                    T[i][j] = Math.max(target_with, target_without);\r\n                } else {\r\n                    T[i][j] = target_without\r\n                }\r\n            }\r\n        }\r\n\r\n        // get total cost and remainder of selected items\r\n        const total = (T[num_items][target] / 100.).toFixed(2)\r\n        const remainder = ((target / 100.) - total).toFixed(2)\r\n\r\n        // get selected items\r\n        let selected_items_idxs = []\r\n        let curr_item_idx = num_items\r\n        let curr_target_idx = target\r\n        while (curr_item_idx > 0 && curr_target_idx > 0) {\r\n            // curr item not used\r\n            if (T[curr_item_idx][curr_target_idx] === T[curr_item_idx-1][curr_target_idx]) {\r\n                curr_item_idx--\r\n                continue\r\n            }\r\n            // curr item used\r\n            selected_items_idxs.push(curr_item_idx-1)\r\n            curr_target_idx -= item_prices[curr_item_idx-1]\r\n            curr_item_idx--\r\n        }\r\n        selected_items_idxs.map(idx => {\r\n            item_selections[idx] = true\r\n        })\r\n\r\n        // update state\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: \"$\" + remainder,\r\n            total: \"$\" + total\r\n        })\r\n    }\r\n\r\n    /** FORM HANDLERS */\r\n\r\n    render_input = (index) => {\r\n        // dynamic classname for indicating selections\r\n        let input_group_id = \"unselected\"\r\n        if (this.state.item_selections[index] === true) {\r\n            input_group_id = \"selected\"\r\n        }\r\n\r\n        // render input group\r\n        return (\r\n            <div className=\"input_group\" id={input_group_id}>\r\n                <div className=\"input_group-section\" id=\"name\">\r\n                    {/* <div className=\"input_group-label\"></div> */}\r\n                    <input\r\n                        className=\"input_group-input\"\r\n                        id={input_group_id}\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Item\"\r\n                        value={this.state.item_names[index]}\r\n                        onChange={(e) => {this.handle_item_name_change(e, index)}}\r\n                    />\r\n                </div>\r\n                <div className=\"input_group-section\" id=\"price\">\r\n                    <div className=\"input_group-label\">$</div>\r\n                    <input\r\n                        className=\"input_group-input\"\r\n                        id={input_group_id}\r\n                        type=\"text\"\r\n                        value={this.state.item_prices[index]}\r\n                        onChange={(e) => {this.handle_item_price_change(e, index)}}\r\n                    />\r\n                </div>\r\n                <div className=\"input_group-section\" id=\"close\">\r\n                    <div\r\n                        className=\"remove_icon\"\r\n                        onClick={(e) => {this.remove_input(e, index)}}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    append_input = () => {\r\n        // add input group\r\n        this.setState(prevState => ({\r\n            inputs: prevState.inputs.concat([this.state.inputs.length]),\r\n            item_names: prevState.item_names.concat([\"\"]),\r\n            item_prices: prevState.item_prices.concat([0])\r\n        }))\r\n\r\n        // reset selections\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    remove_input = (e, index) => {\r\n        // stop auto refresh\r\n        e.preventDefault()\r\n\r\n        // remove item & update state\r\n        const updated_inputs = this.state.inputs\r\n        updated_inputs.pop()\r\n        const updated_item_names = this.state.item_names\r\n        updated_item_names.splice(index, 1)\r\n        const updated_item_prices = this.state.item_prices\r\n        updated_item_prices.splice(index, 1)\r\n        this.setState({\r\n            inputs: updated_inputs,\r\n            item_names: updated_item_names,\r\n            item_prices: updated_item_prices\r\n        })\r\n\r\n        // reset selections\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    handle_item_name_change = (e, index) => {\r\n        // update item name\r\n        let item_names = this.state.item_names\r\n        item_names[index] = e.target.value\r\n        this.setState({\r\n            item_names: item_names\r\n        })\r\n\r\n        // reset selections\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    handle_item_price_change = (e, index) => {\r\n        // update item price\r\n        let item_prices = this.state.item_prices\r\n        item_prices[index] = e.target.value\r\n        this.setState({\r\n            item_prices: item_prices\r\n        })\r\n\r\n        // reset selections\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    handle_target_change = (e) => {\r\n        let input = e.target.value\r\n        const price_regex = /^\\$((0\\.\\d{1,2})|([1-9])+(\\d)*(\\.\\d{0,2})?)$/g\r\n        // if (isNaN(input)) {\r\n            // return\r\n        // }\r\n        if (!input) {\r\n            input = \"$\"\r\n        }\r\n\r\n        // update target\r\n        this.setState({\r\n            target: input\r\n        })\r\n\r\n        // reset selections\r\n        this.reset_item_selections()\r\n    }\r\n\r\n    reset_item_selections = () => {\r\n        // reset all item selections to false\r\n        const num_items = this.state.item_prices.length\r\n        let item_selections = []\r\n        for (let i = 0; i < num_items; i++) {\r\n            item_selections.push(false)\r\n        }\r\n        this.setState({\r\n            item_selections: item_selections,\r\n            remainder: this.state.target,\r\n            total: \"$0\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"KnapsackCalculator\">\r\n                {/* HEADERS */}\r\n                <div className=\"header1\">\r\n                    <div>Budget</div>\r\n                    <input\r\n                        className=\"input_group-input\"\r\n                        id=\"target-input\"\r\n                        type=\"text\"\r\n                        value={this.state.target}\r\n                        onChange={(e) => {this.handle_target_change(e)}}\r\n                    />\r\n                </div>\r\n                <div className=\"header2\">\r\n                    <div className=\"header2-section\">\r\n                        Total: {this.state.total}\r\n                    </div>\r\n                    <div className=\"header2-section\">\r\n                        Remaining: {this.state.remainder}\r\n                    </div>\r\n                </div>\r\n                {/* ITEM INPUTS */}\r\n                <form>\r\n                    {this.state.inputs.map(index => {\r\n                        return this.render_input(index)\r\n                    })}\r\n                </form>\r\n                {/* BUTTONS */}\r\n                <div className=\"button_group\">\r\n                    <div className=\"button\" id=\"add-item\" onClick={() => this.append_input()}>\r\n                        Add Item\r\n                    </div>\r\n                    <div className=\"button\" id=\"calculate\" onClick={() => this.calculate_solution()}>\r\n                        Calculate\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport KnapsackCalculator from './knapsack-calculator/knapsack-calculator';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <KnapsackCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}